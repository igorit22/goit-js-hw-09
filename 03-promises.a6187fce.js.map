{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAG0B,SAAjBC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAKOO,SAALC,eAAe,gBAAgBC,iBAAiB,UAAU,SAACC,GAClEA,EAAMC,iBAEN,IAAMC,EAAQC,OAAOH,EAAMI,OAAOC,SAASf,MAAMgB,OACjD,GAAIH,OAAOI,MAAML,GACfM,SAASC,OAAOC,QAAQ,4BAD1B,CAKA,IAAMC,EAAOR,OAAOH,EAAMI,OAAOC,SAASM,KAAKL,OAC/C,GAAIH,OAAOI,MAAMI,GACfH,SAASC,OAAOC,QAAQ,2BAD1B,CAKA,IAAME,EAAST,OAAOH,EAAMI,OAAOC,SAASO,OAAON,OACnD,GAAIH,OAAOI,MAAMK,GACfJ,SAASC,OAAOC,QAAQ,6BAD1B,CAOA,IADuB,IAAjBG,EAAW,GACRC,EAAI,EAAGA,GAAKF,EAAQE,IAAK,CAChC,IAEMC,EAAU3B,EAFC0B,EACIZ,GAASY,EAAI,GAAKH,GAGvCE,EAASG,KAAKD,E,CAIhBxB,QAAQ0B,WAAWJ,GAAUK,MAAK,SAACC,GACjCA,EAAQC,SAAQ,SAACC,GACf,IAA4BC,EAAAD,EAAOf,OAASe,EAAOE,OAA3ClC,EAAoBiC,EAApBjC,SAAUC,EAAUgC,EAAVhC,MACI,cAAlB+B,EAAOG,OACTC,EAAAvC,GAASuB,OAAOiB,QAAQ,qBAAoCC,OAAftC,EAAS,QAAYsC,OAANrC,EAAM,OAElEmC,EAAAvC,GAASuB,OAAOC,QAAQ,oBAAmCiB,OAAftC,EAAS,QAAYsC,OAANrC,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Функція createPromise з поверненням промісу\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Відправка форми\ndocument.getElementById(\"promise-form\").addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  const delay = Number(event.target.elements.delay.value);\n  if (Number.isNaN(delay)) {\n    notiflix.Notify.failure('Invalid delay value!');\n    return;\n  }\n\n  const step = Number(event.target.elements.step.value);\n  if (Number.isNaN(step)) {\n    notiflix.Notify.failure('Invalid step value!');\n    return;\n  }\n\n  const amount = Number(event.target.elements.amount.value);\n  if (Number.isNaN(amount)) {\n    notiflix.Notify.failure('Invalid amount value!');\n    return;\n  }\n\n  // Створення масиву промісів\n  const promises = [];\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    const promiseDelay = delay + (i - 1) * step;\n    const promise = createPromise(position, promiseDelay);\n\n    promises.push(promise);\n  }\n\n  // Відображення повідомлень користувачеві\n  Promise.allSettled(promises).then((results) => {\n    results.forEach((result) => {\n      const { position, delay } = result.value || result.reason;\n      if (result.status === \"fulfilled\") {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      }\n    });\n  });\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","getElementById","addEventListener","event","preventDefault","delay1","Number","target","elements","value","isNaN","notiflix","Notify","failure","step","amount","promises","i","promise","push","allSettled","then","results","forEach","result","ref","reason","status","$parcel$interopDefault","success","concat"],"version":3,"file":"03-promises.a6187fce.js.map"}